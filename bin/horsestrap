#!/bin/bash

# Horsestrap CLI - Zero-configuration deployment tool
# Compatible with macOS, Ubuntu LTS, and other Linux distros

set -e  # Exit on error

# Version and metadata
HORSESTRAP_VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Unicode characters for progress
HORSE="üê¥"
CHECK="‚úÖ"
CROSS="‚ùå"
ARROW="‚Üí"
GEAR="‚öôÔ∏è"
ROCKET="üöÄ"

# Logging functions
log_header() {
    echo -e "\n${BOLD}${BLUE}${HORSE} $1${NC}"
    echo -e "${BLUE}$(printf '=%.0s' {1..50})${NC}"
}

log_info() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}${CROSS} $1${NC}"
}

log_step() {
    echo -e "${CYAN}${ARROW} $1${NC}"
}

log_command() {
    echo -e "${DIM}${GEAR} Running: $1${NC}"
}

log_success() {
    echo -e "\n${GREEN}${BOLD}${ROCKET} $1${NC}\n"
}

# Progress spinner
spinner() {
    local pid=$1
    local message=$2
    local delay=0.1
    local spinstr='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf "\r${CYAN}%c ${message}...${NC}" "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
    done
    printf "\r"
}

# Show banner
show_banner() {
    echo -e "${BOLD}${BLUE}"
    echo "    üê¥ HORSESTRAP"
    echo "    Zero-config deployment"
    echo "    v${HORSESTRAP_VERSION}"
    echo -e "${NC}"
}

# Show help
show_help() {
    show_banner
    echo -e "${BOLD}USAGE:${NC}"
    echo "  horsestrap <command> [options]"
    echo
    echo -e "${BOLD}COMMANDS:${NC}"
    echo -e "  ${GREEN}setup${NC}     Interactive setup (prompts for domain, passwords, etc.)"
    echo -e "  ${GREEN}update${NC}    Update to latest version with zero downtime"
    echo -e "  ${GREEN}status${NC}    Check status of all services"
    echo -e "  ${GREEN}logs${NC}      View logs for all services"
    echo -e "  ${GREEN}restart${NC}   Restart services"
    echo -e "  ${GREEN}stop${NC}      Stop all services"
    echo -e "  ${GREEN}backup${NC}    Backup database and media files"
    echo -e "  ${GREEN}init${NC}      Create a new project from the Horsestrap template"
    echo -e "  ${GREEN}rollback${NC}  Rollback to previous version"
    echo -e "  ${GREEN}clean${NC}     Complete cleanup (stops services, removes containers)"
    echo
    echo -e "${BOLD}OPTIONS:${NC}"
    echo -e "  ${CYAN}--help, -h${NC}    Show this help message"
    echo -e "  ${CYAN}--version, -v${NC} Show version information"
    echo -e "  ${CYAN}--auto${NC}       Use automatic defaults (no prompts)"
    echo -e "  ${CYAN}--dry-run${NC}    Show what would be done without executing"
    echo
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo "  horsestrap setup              # Interactive setup"
    echo "  horsestrap setup --auto       # Setup with defaults"
    echo "  horsestrap logs --web         # View web service logs"
    echo "  horsestrap status             # Check all service health"
    echo
    echo -e "${DIM}For more info: https://github.com/mykebates/horsestrap${NC}"
}

# Check if we're in a Horsestrap project
check_project_root() {
    if [[ ! -f "$PROJECT_ROOT/setup.sh" ]] || [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        log_error "Not in a Horsestrap project directory"
        echo -e "${DIM}Run this command from your Horsestrap project root${NC}"
        exit 1
    fi
}

# Validate system requirements
check_requirements() {
    log_step "Checking system requirements"
    
    local missing=0
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        echo -e "${DIM}Install: https://docs.docker.com/get-docker/${NC}"
        missing=1
    fi
    
    # Check Docker Compose
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not available"
        missing=1
    fi
    
    # Check Docker daemon
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        missing=1
    fi
    
    # Check Git
    if ! command -v git &> /dev/null; then
        log_error "Git is not installed"
        missing=1
    fi
    
    if [ $missing -eq 1 ]; then
        echo -e "\n${RED}Please install missing requirements and try again${NC}"
        exit 1
    fi
    
    log_info "All requirements satisfied"
}

# Interactive setup command
cmd_setup() {
    local auto_mode=false
    local dry_run=false
    
    # Parse setup-specific options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --auto)
                auto_mode=true
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    log_header "Horsestrap Setup"
    
    check_requirements
    
    # Interactive prompts (unless auto mode)
    if [ "$auto_mode" = false ]; then
        echo -e "\n${BOLD}Let's get your site configured:${NC}\n"
        
        # Domain
        local default_domain="localhost"
        read -p "$(echo -e "${CYAN}What's your domain? (${default_domain}): ${NC}")" domain
        domain=${domain:-$default_domain}
        
        # Password generation
        echo -e "${CYAN}Generate secure database password automatically? (Y/n): ${NC}\c"
        read -n 1 -r auto_password
        echo
        if [[ ! $auto_password =~ ^[Nn]$ ]]; then
            db_password=$(openssl rand -base64 24)
        else
            read -s -p "$(echo -e "${CYAN}Enter database password: ${NC}")" db_password
            echo
        fi
        
        # Database name
        local default_db="YourApp_Web"
        read -p "$(echo -e "${CYAN}Database name (${default_db}): ${NC}")" db_name
        db_name=${db_name:-$default_db}
        
        # Environment
        local default_env="Production"
        echo -e "${CYAN}Environment (Production/Staging/Development) (${default_env}): ${NC}\c"
        read environment
        environment=${environment:-$default_env}
        
    else
        # Auto mode defaults
        domain="localhost"
        db_password=$(openssl rand -base64 24)
        db_name="YourApp_Web"
        environment="Production"
        
        log_info "Using automatic defaults"
    fi
    
    # Create .env file
    log_step "Creating .env configuration"
    
    if [ "$dry_run" = true ]; then
        echo -e "${DIM}Would create .env with:${NC}"
        echo -e "${DIM}  DOMAIN=$domain${NC}"
        echo -e "${DIM}  SA_PASSWORD=[generated]${NC}"
        echo -e "${DIM}  DB_NAME=$db_name${NC}"
        echo -e "${DIM}  ASPNETCORE_ENVIRONMENT=$environment${NC}"
        return
    fi
    
    cat > "$PROJECT_ROOT/.env" << EOF
# Horsestrap Environment Configuration
DOMAIN=$domain
SA_PASSWORD=$db_password
DB_NAME=$db_name
ASPNETCORE_ENVIRONMENT=$environment
EOF
    
    log_info ".env file created"
    
    # Run setup script
    log_step "Running setup script"
    log_command "./setup.sh"
    
    cd "$PROJECT_ROOT"
    if ./setup.sh; then
        log_success "Setup complete! Your site is ready at https://$domain"
    else
        log_error "Setup failed. Check the output above for details."
        exit 1
    fi
}

# Status command
cmd_status() {
    log_header "Service Status"
    
    check_project_root
    cd "$PROJECT_ROOT"
    
    log_command "docker compose ps"
    if docker compose ps; then
        log_info "Service status retrieved"
    else
        log_error "Failed to get service status"
        exit 1
    fi
}

# Logs command
cmd_logs() {
    local service=""
    local follow=true
    
    # Parse log options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --web)
                service="web"
                shift
                ;;
            --db)
                service="db"
                shift
                ;;
            --caddy)
                service="caddy"
                shift
                ;;
            --no-follow)
                follow=false
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    log_header "Service Logs"
    check_project_root
    cd "$PROJECT_ROOT"
    
    local cmd="docker compose logs"
    if [ "$follow" = true ]; then
        cmd="$cmd -f"
    fi
    if [ -n "$service" ]; then
        cmd="$cmd $service"
    fi
    
    log_command "$cmd"
    eval "$cmd"
}

# Update command
cmd_update() {
    log_header "Updating to Latest Version"
    
    check_project_root
    cd "$PROJECT_ROOT"
    
    log_step "Running deployment script"
    log_command "./deploy.sh"
    
    if ./deploy.sh; then
        log_success "Update completed successfully!"
    else
        log_error "Update failed. Check the output above for details."
        exit 1
    fi
}

# Stop command  
cmd_stop() {
    log_header "Stopping Services"
    
    check_project_root
    cd "$PROJECT_ROOT"
    
    log_command "docker compose down"
    if docker compose down; then
        log_success "All services stopped"
    else
        log_error "Failed to stop services"
        exit 1
    fi
}

# Init command - Create new project from template
cmd_init() {
    log_header "Horsestrap Project Genesis"
    
    # Check if parameter is oranges (easter egg)
    if [[ "$1" == "oranges" ]]; then
        echo -e "\n${BOLD}${YELLOW}üçä Finding the oranges... I mean origins of your project!${NC}\n"
        sleep 1
    fi
    
    # Prompt for project name
    echo -en "${BOLD}What's your project name? (e.g., MyAwesome): ${NC}"
    read -r project_name
    
    if [[ -z "$project_name" ]]; then
        log_error "Project name is required"
        exit 1
    fi
    
    # Sanitize project name (remove spaces, special chars)
    clean_name=$(echo "$project_name" | sed 's/[^a-zA-Z0-9]//g')
    
    if [[ -z "$clean_name" ]]; then
        log_error "Invalid project name - must contain letters or numbers"
        exit 1
    fi
    
    # Check if directory already exists
    if [[ -d "$clean_name" ]]; then
        log_error "Directory '$clean_name' already exists"
        exit 1
    fi
    
    log_step "Creating project: $clean_name"
    
    # Clone the template
    log_command "Cloning Horsestrap template..."
    if ! git clone https://github.com/mykebates/horsestrap-base-umbraco.git "$clean_name" 2>/dev/null; then
        log_error "Failed to clone template repository"
        exit 1
    fi
    
    cd "$clean_name"
    
    # Remove git history
    rm -rf .git
    
    # Find and rename solution file
    log_step "Configuring solution..."
    if [[ -f "Horsestrap.sln" ]]; then
        mv "Horsestrap.sln" "${clean_name}.sln"
        
        # Update solution file contents (macOS compatible sed)
        sed -i '' "s/Horsestrap\.Web/${clean_name}.Web/g" "${clean_name}.sln"
    fi
    
    # Find and rename web project directory
    log_step "Configuring web project..."
    if [[ -d "Horsestrap.Web" ]]; then
        mv "Horsestrap.Web" "${clean_name}.Web"
        
        # Update project file
        if [[ -f "${clean_name}.Web/Horsestrap.Web.csproj" ]]; then
            mv "${clean_name}.Web/Horsestrap.Web.csproj" "${clean_name}.Web/${clean_name}.Web.csproj"
        fi
        
        # Update namespace references in all .cs and .cshtml files (macOS compatible)
        find "${clean_name}.Web" -type f \( -name "*.cs" -o -name "*.cshtml" \) -exec sed -i '' "s/Horsestrap\.Web/${clean_name}.Web/g" {} \;
        
        # Update appsettings.json files
        for settings_file in "${clean_name}.Web"/appsettings*.json; do
            if [[ -f "$settings_file" ]]; then
                sed -i '' "s/Horsestrap/${clean_name}/g" "$settings_file"
            fi
        done
        
        # Update Dockerfile if it exists
        if [[ -f "${clean_name}.Web/Dockerfile" ]]; then
            sed -i '' "s/Horsestrap\.Web/${clean_name}.Web/g" "${clean_name}.Web/Dockerfile"
            sed -i '' "s/Horsestrap\.sln/${clean_name}.sln/g" "${clean_name}.Web/Dockerfile"
        fi
        
        # Update launchSettings.json
        if [[ -f "${clean_name}.Web/Properties/launchSettings.json" ]]; then
            sed -i '' "s/Horsestrap\.Web/${clean_name}.Web/g" "${clean_name}.Web/Properties/launchSettings.json"
        fi
    fi
    
    # Update docker-compose.yml if it exists
    if [[ -f "docker-compose.yml" ]]; then
        sed -i '' "s|Horsestrap\.Web|${clean_name}.Web|g" docker-compose.yml
        sed -i '' "s/Horsestrap_Web/${clean_name}_Web/g" docker-compose.yml
    fi
    
    # Update deployment scripts if they exist
    for script in setup.sh deploy.sh; do
        if [[ -f "$script" ]]; then
            sed -i '' "s/Horsestrap_Web/${clean_name}_Web/g" "$script"
            sed -i '' "s/Horsestrap/${clean_name}/g" "$script"
        fi
    done
    
    # Initialize git repo
    git init
    git add .
    git commit -m "Initial commit - Created with Horsestrap" > /dev/null 2>&1
    
    # Show summary
    log_success "Project '$clean_name' created successfully!"
    
    echo -e "${BOLD}${GREEN}‚úÖ Project: ${clean_name}${NC}"
    echo -e "${BOLD}${GREEN}‚úÖ Solution: ${clean_name}.sln${NC}"
    echo -e "${BOLD}${GREEN}‚úÖ Web Project: ${clean_name}.Web${NC}"
    
    echo -e "\n${BOLD}Next steps:${NC}"
    echo -e "  ${CYAN}1.${NC} cd $clean_name/${clean_name}.Web && dotnet run  ${DIM}# For local development${NC}"
    echo -e "  ${CYAN}2.${NC} horsestrap setup  ${DIM}# For production deployment${NC}"
    
    if [[ "$1" == "oranges" ]]; then
        echo -e "\n${YELLOW}üçä The oranges have been found and squeezed into fresh project juice!${NC}"
    fi
}

# Main command dispatcher
main() {
    # Handle no arguments
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    # Parse global options first
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                echo "Horsestrap v${HORSESTRAP_VERSION}"
                exit 0
                ;;
            setup|update|status|logs|restart|stop|backup|rollback|clean|init|oranges)
                local command=$1
                shift
                break
                ;;
            *)
                log_error "Unknown command: $1"
                echo -e "${DIM}Run 'horsestrap --help' for usage information${NC}"
                exit 1
                ;;
        esac
    done
    
    # Execute command
    case $command in
        setup)
            cmd_setup "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        init)
            cmd_init "$@"
            ;;
        oranges)
            # Hidden easter egg - runs init with oranges parameter
            cmd_init "oranges"
            ;;
        restart|backup|rollback|clean)
            log_warn "Command '$command' not yet implemented"
            echo -e "${DIM}Coming soon in the next version!${NC}"
            exit 1
            ;;
        *)
            log_error "Unknown command: $command"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"